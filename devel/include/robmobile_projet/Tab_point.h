// Generated by gencpp from file robmobile_projet/Tab_point.msg
// DO NOT EDIT!


#ifndef ROBMOBILE_PROJET_MESSAGE_TAB_POINT_H
#define ROBMOBILE_PROJET_MESSAGE_TAB_POINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robmobile_projet
{
template <class ContainerAllocator>
struct Tab_point_
{
  typedef Tab_point_<ContainerAllocator> Type;

  Tab_point_()
    : tab_points_X()
    , tab_points_Y()
    , size(0)  {
    }
  Tab_point_(const ContainerAllocator& _alloc)
    : tab_points_X(_alloc)
    , tab_points_Y(_alloc)
    , size(0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _tab_points_X_type;
  _tab_points_X_type tab_points_X;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _tab_points_Y_type;
  _tab_points_Y_type tab_points_Y;

   typedef uint8_t _size_type;
  _size_type size;




  typedef boost::shared_ptr< ::robmobile_projet::Tab_point_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robmobile_projet::Tab_point_<ContainerAllocator> const> ConstPtr;

}; // struct Tab_point_

typedef ::robmobile_projet::Tab_point_<std::allocator<void> > Tab_point;

typedef boost::shared_ptr< ::robmobile_projet::Tab_point > Tab_pointPtr;
typedef boost::shared_ptr< ::robmobile_projet::Tab_point const> Tab_pointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robmobile_projet::Tab_point_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robmobile_projet::Tab_point_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robmobile_projet

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'robmobile_projet': ['/home/marion/catkin_ws/src/robmobile_projet/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robmobile_projet::Tab_point_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robmobile_projet::Tab_point_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robmobile_projet::Tab_point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robmobile_projet::Tab_point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robmobile_projet::Tab_point_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robmobile_projet::Tab_point_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robmobile_projet::Tab_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c3ab8d762f1957274b3be318659dca4";
  }

  static const char* value(const ::robmobile_projet::Tab_point_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c3ab8d762f19572ULL;
  static const uint64_t static_value2 = 0x74b3be318659dca4ULL;
};

template<class ContainerAllocator>
struct DataType< ::robmobile_projet::Tab_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robmobile_projet/Tab_point";
  }

  static const char* value(const ::robmobile_projet::Tab_point_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robmobile_projet::Tab_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] tab_points_X\n\
float32[] tab_points_Y\n\
uint8 size\n\
";
  }

  static const char* value(const ::robmobile_projet::Tab_point_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robmobile_projet::Tab_point_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tab_points_X);
      stream.next(m.tab_points_Y);
      stream.next(m.size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Tab_point_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robmobile_projet::Tab_point_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robmobile_projet::Tab_point_<ContainerAllocator>& v)
  {
    s << indent << "tab_points_X[]" << std::endl;
    for (size_t i = 0; i < v.tab_points_X.size(); ++i)
    {
      s << indent << "  tab_points_X[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tab_points_X[i]);
    }
    s << indent << "tab_points_Y[]" << std::endl;
    for (size_t i = 0; i < v.tab_points_Y.size(); ++i)
    {
      s << indent << "  tab_points_Y[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.tab_points_Y[i]);
    }
    s << indent << "size: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBMOBILE_PROJET_MESSAGE_TAB_POINT_H
